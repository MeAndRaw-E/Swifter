---
description: You must follow this rule when you are debugging previews but not on the actual device!
globs: 
alwaysApply: false
---
**Detailed Instructions for AI Using `PreviewLogger` Module:**

**1. Prerequisites & Environment:**

*   **Target Environment:** Confirm the code requiring logging *is running within a SwiftUI Preview*. The logger is explicitly designed for this. It uses `#if DEBUG` and checks `ProcessInfo.processInfo.environment["XCODE_RUNNING_FOR_PREVIEWS"] == "1"`. Logs *will not* be generated in regular app runs, release builds, or unit tests.
*   **Import Module:** Ensure the necessary module is imported. Assuming the module name is `LoggingTime`, add:
    ```swift
    import LoggingTime
    ```

**2. Controlling Log Verbosity (`setLogLevel`):**

*   **Purpose:** To filter logs based on severity. Only messages with a level equal to or higher than the set level will be displayed.
*   **How to Use:** Call the static `PreviewLogger.setLogLevel(_:)` method. This asynchronously updates the log level on the shared `PreviewLogger` actor instance.
*   **Available Levels (from `LogLevel.swift`):** Choose the *minimum* level you want to see:
    *   `.trace` (0 üë£): Ultra-fine-grained execution tracing. Shows everything.
    *   `.inspect` (1 üïµÔ∏è): Variable/object state inspection.
    *   `.search` (2 üîç): Logging search, query, or filter operations.
    *   `.observe` (3 üëÄ): Observing events, notifications, state changes.
    *   `.info` (4 ‚ÑπÔ∏è): **(Default Level)** General operational information, milestones.
    *   `.concern` (5 üí≠): Potential issues, non-critical deviations.
    *   `.suspect` (6 ü§î): Suspicious conditions warranting investigation.
    *   `.error` (7 üêõ): Recoverable errors, bugs impacting functionality.
    *   `.danger` (8 ‚õîÔ∏è): Serious errors causing significant disruption.
    *   `.showstopper` (9 üíÄ): Critical, fatal errors halting major functions.
*   **Default:** If `setLogLevel` is never called, the default level is `.info`.
*   **Example:** To capture detailed debugging info including variable inspections and traces:
    ```swift
    // Place early in your PreviewProvider or preview setup code
    PreviewLogger.setLogLevel(.trace)
    ```
    To only see serious errors and above:
    ```swift
    PreviewLogger.setLogLevel(.danger)
    ```

**3. Logging Messages (`log`):**

*   **Mechanism:** Logging is performed asynchronously using `Task` internally, managed by the `PreviewLogger` actor to ensure thread safety.
*   **Method Overloads:** Use the static `PreviewLogger.log(...)` methods:
    *   **Automatic Context:** `log(_:level:file:function:line:)`
        *   Captures the call site automatically (`#file`, `#function`, `#line`).
        *   `message: String`: The content to log. Can include interpolated variables.
        *   `level: LogLevel`: The severity level (defaults to `.info`). **Crucially, select the level that best describes the nature of the log message from the detailed `LogLevel` enum.**
        *   **Example Usage:**
            ```swift
            // Trace execution flow
            PreviewLogger.log("Entered calculateLayout function", level: .trace)

            // Inspect a variable's value
            PreviewLogger.log("Current state value: \n" + String(describing: viewModel.currentState), level: .inspect)

            // Log a successful operation
            PreviewLogger.log("Configuration loaded successfully.", level: .info)

            // Note a potential issue
            if dataCache.isStale {
                PreviewLogger.log("Data cache is stale, performance might degrade.", level: .concern)
            }

            // Log a caught, handled error
            do {
                try performCriticalTask()
            } catch let taskError {
                PreviewLogger.log("Critical task failed but was handled: \n" + String(describing: taskError), level: .error)
            }

             // Log a fatal condition before potentially stopping
             guard resourceAvailable else {
                 PreviewLogger.log("Essential resource unavailable!", level: .showstopper)
                 fatalError("Cannot continue without essential resource.") // Example action
             }
            ```
    *   **Custom Context:** `log(_:level:context:)`
        *   Use this if you need to provide context information different from the immediate call site (e.g., logging about an event that originated elsewhere).
        *   Requires manually creating and passing a `LoggingContext` object (the exact structure of `LoggingContext` is determined by its own definition, not fully shown in the provided snippets).

**4. Interpreting Log Output:**

*   **Location:** Logs appear in the standard debug console (e.g., Xcode's console pane, VSCode's debug console).
*   **Format:** The output is structured by the internal `MessageFormatter`. Expect to see:
    *   Log Level Icon (e.g., üë£, üïµÔ∏è, üêõ, üíÄ)
    *   Log Level Description (e.g., TRACE, INSPECT, ERROR, SHOWSTOPPER)
    *   Timestamp (likely added by the formatter)
    *   The Log Message itself
    *   Location Info (File name, Function name, Line number)

**5. Cleanup:**

*   While logs only appear in debug previews, consider commenting out or removing highly verbose logs (especially `.trace` and `.inspect`) once debugging is complete to keep the console output focused during future development.

**Summary for AI:**

*   Target **SwiftUI Previews only**.
*   `import LoggingTime`.
*   Use `setLogLevel` with *specific* levels (`.trace`..`.showstopper`) for filtering. Default is `.info`.
*   Use `log` with the *most appropriate* `LogLevel` to convey precise meaning. Leverage automatic context capture.
*   Logging is asynchronous and actor-safe.
*   Check the debug console for formatted output (icon, level, message, location).
*   Remember logs are conditional (`DEBUG` + `XCODE_RUNNING_FOR_PREVIEWS`).